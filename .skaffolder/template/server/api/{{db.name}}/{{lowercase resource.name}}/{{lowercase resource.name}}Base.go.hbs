**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
package {{lowercase resource.name}}

/**
 * 
 * 
  _____                      _              _ _ _     _   _     _        __ _ _      
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |     
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___ 
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|
 
 * DO NOT EDIT THIS FILE!! 
 * 
 *  TO CUSTOMIZE {{resource.name}}Base.go PLEASE EDIT ./{{resource._entity.name}}.go
 * 
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 * 
 */

import (
	"encoding/json"
	"net/http"{{#inArray (pluck resource._entity._attrs "type") "Date"}}
	"time"{{/inArray}}

	"github.com/globalsign/mgo/bson"
	"github.com/go-chi/chi"
	"github.com/go-chi/render"
)

{{#notNull resource._entity}}
// Data model
type {{resource.name}} struct {
	ID		bson.ObjectId	`bson:"_id,omitempty" json:"_id"`{{#each resource._entity._attrs}}
	{{capitalize name}}	{{toGoType type}}		`json:"{{name}}"`{{/each}}

	{{#each resource._relations}}
		{{#equal _ent1.name ../resource.name}}
			{{#equal type '1:m'}}
	{{capitalize name}}	bson.ObjectId	`bson:"{{name}},omitempty" json:"{{name}}"`
			{{/equal}}
			{{#equal type 'm:m'}}
	{{capitalize name}}	[]bson.ObjectId	`bson:"{{name}},omitempty" json:"{{name}}"`
			{{/equal}}
		{{/equal}}
	{{/each}}

}

// Functions

// CRUD METHODS
{{#each resource._services}}
	{{#equal crudAction 'create'}}
	
// CRUD - CREATE
func (config *Config) {{name}}(writer http.ResponseWriter, req *http.Request) {

	var body {{../resource.name}}
	json.NewDecoder(req.Body).Decode(&body)
	config.Database.C("{{../resource.name}}").Insert(body)
	render.JSON(writer, req, &body)
}
	{{/equal}}
	{{#equal crudAction 'delete'}}

// CRUD - DELETE
func (config *Config) delete(writer http.ResponseWriter, req *http.Request) {

	id := chi.URLParam(req, "id")
	config.Database.C("{{../resource.name}}").RemoveId(bson.ObjectIdHex(id))
	render.JSON(writer, req, id)
}
	{{/equal}}
	{{#equal crudAction 'get'}}

// CRUD - GET
func (config *Config) get(writer http.ResponseWriter, req *http.Request) {

	var result {{../resource.name}}
	id := chi.URLParam(req, "id")
	err := config.Database.C("{{../resource.name}}").FindId(bson.ObjectIdHex(id)).One(&result)
	if err != nil {
		panic(err)
	}

	render.JSON(writer, req, result)
}
	{{/equal}}
	{{#equal crudAction 'list'}}
	
// CRUD - GET LIST
func (config *Config) list(writer http.ResponseWriter, req *http.Request) {

	var result []{{../resource.name}}
	err := config.Database.C("{{../resource.name}}").Find(nil).All(&result)
	if err != nil {
		panic(err)
	}

	render.JSON(writer, req, result)
}
	{{/equal}}
	{{#equal crudAction 'update'}}

// CRUD - UPDATE
func (config *Config) update(writer http.ResponseWriter, req *http.Request) {

	id := chi.URLParam(req, "id")
	var body {{../resource.name}}
	json.NewDecoder(req.Body).Decode(&body)
	config.Database.C("{{../resource.name}}").UpdateId(bson.ObjectIdHex(id), body)
	render.JSON(writer, req, body)
}
	{{/equal}}
	{{#startWith crudAction 'findBy'}}

// CRUD - FIND BY {{#subStr name 6 }}{{/subStr}}
func (config *Config) {{name}}(writer http.ResponseWriter, req *http.Request) {
	var result []{{../resource.name}}
	key := chi.URLParam(req, "key")
	err := config.Database.C("{{../resource.name}}").Find(bson.M{"{{#subStr name 6 }}{{/subStr}}": bson.ObjectIdHex(key)}).All(&result)
	if err != nil {
		panic(err)
	}

	render.JSON(writer, req, result)
}
	{{/startWith}}
{{/each}}
{{/notNull}}

/*
 * CUSTOM SERVICES
 * 
 *	These services will be overwritten and implemented in  {{name}}Ext.go
 */
{{#each resource._services}}{{#equal crudAction null}}

/*
Name: {{name}}
Description: {{description}}
Params: {{#each _params}}
	{{type}} {{name}} - {{description}}{{/each}}
*/
func (config *Config) {{name}}(writer http.ResponseWriter, request *http.Request) {
	response := make(map[string]string)
	render.JSON(writer, request, response)
}		
{{/equal}}{{/each}}