**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE FUNCTIONS IN {{capitalize resource.name}}ActionsGenerated.js PLEASE EDIT ../{{capitalize resource.name}}Actions.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */

import * as types from "../../actionTypes";
import {{capitalize resource.name}}Api from "../../../api/{{capitalize resource.name}}Api";

let actionsFunction = {
  
  // Reset reducer
  reset: function() {
    return { type: types.RESET_{{uppercase resource.name}} };
  },

{{#notNull resource._entity}}
  //CRUD METHODS
{{#each resource._services}}
	{{#equal crudAction 'list'}}
  // Load {{lowercase resource.name}} list
  load{{capitalize ../resource.name}}List: function() {
    return function(dispatch) {
      return {{capitalize ../resource.name}}Api
        .get{{capitalize ../resource.name}}List()
        .then(list => {
          dispatch(actionsFunction.load{{capitalize ../resource.name}}ListSuccess(list));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  load{{capitalize ../resource.name}}ListSuccess: function(list) {
    return { type: types.{{uppercase name}}_{{uppercase ../resource.name}}_SUCCESS, payload: list };
  },

	{{/equal}}
	{{#equal crudAction 'get'}}

  // Get {{lowercase ../resource.name}}
  load{{capitalize ../resource.name}}: function(id) {
    return function(dispatch) {
      return {{capitalize ../resource.name}}Api
        .getOne{{capitalize ../resource.name}}(id)
        .then({{lowercase ../resource.name}} => {
          dispatch(actionsFunction.load{{capitalize ../resource.name}}Success({{lowercase ../resource.name}}));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  load{{capitalize ../resource.name}}Success: function({{lowercase ../resource.name}}) {
    return { type: types.{{uppercase name}}_{{uppercase ../resource.name}}_SUCCESS, payload: {{lowercase ../resource.name}} };
  },

	{{/equal}}
	{{#equal crudAction 'update'}}
	
  // Save {{lowercase ../resource.name}}
  save{{capitalize ../resource.name}}: function({{lowercase ../resource.name}}) {
    return function(dispatch) {
      return {{capitalize ../resource.name}}Api
        .save{{capitalize ../resource.name}}({{lowercase ../resource.name}})
        .then({{lowercase ../resource.name}} => {
          dispatch(actionsFunction.save{{capitalize ../resource.name}}Success({{lowercase ../resource.name}}));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  save{{capitalize ../resource.name}}Success: function({{lowercase ../resource.name}}) {
    return { type: types.{{uppercase name}}_{{uppercase ../resource.name}}_SUCCESS, payload: {{lowercase ../resource.name}} };
  },

	{{/equal}}
	{{#equal crudAction 'create'}}

  // Create {{lowercase ../resource.name}}
  create{{capitalize ../resource.name}}: function({{lowercase ../resource.name}}) {
    return function(dispatch) {
      return {{capitalize ../resource.name}}Api
        .create{{capitalize ../resource.name}}({{lowercase ../resource.name}})
        .then({{lowercase ../resource.name}} => {
          dispatch(actionsFunction.create{{capitalize ../resource.name}}Success({{lowercase ../resource.name}}));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  create{{capitalize ../resource.name}}Success: function({{lowercase ../resource.name}}) {
    return { type: types.{{uppercase name}}_{{uppercase ../resource.name}}_SUCCESS, payload: {{lowercase ../resource.name}} };
  },

	{{/equal}}
	{{#equal crudAction 'delete'}}

  // Delete {{lowercase ../resource.name}}
  delete{{capitalize ../resource.name}}: function(id) {
    return function(dispatch) {
      return {{capitalize ../resource.name}}Api
        .delete{{capitalize ../resource.name}}(id)
        .then({{lowercase ../resource.name}} => {
          dispatch(actionsFunction.delete{{capitalize ../resource.name}}Success({{lowercase ../resource.name}}));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  delete{{capitalize ../resource.name}}Success: function({{lowercase ../resource.name}}) {
    return { type: types.{{uppercase name}}_{{uppercase ../resource.name}}_SUCCESS, payload: {{lowercase ../resource.name}} };
  },

  {{/equal}}
	{{#startWith crudAction 'findBy'}}

  // Find by {{#subStr name 6 }}{{/subStr}}
  {{name}}: function(key) {
    return function(dispatch) {
      return {{capitalize ../resource.name}}Api
        .{{name}}(key)
        .then(item => {
          dispatch(actionsFunction.{{name}}Success(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  {{name}}Success: function(item) {
    return { type: types.{{uppercase name}}_{{uppercase ../resource.name}}_SUCCESS, payload: item };
  },

	{{/startWith}}
	{{#startWith crudAction 'get'}}
	
	// Get relation {{#subStr name 3 }}{{/subStr}}
  {{name}}: function(id) {
    return function(dispatch) {
      return {{capitalize ../resource.name}}Api
        .{{name}}(id)
        .then(item => {
          dispatch(actionsFunction.{{name}}Success(item));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  {{name}}Success: function(item) {
    return { type: types.{{uppercase name}}_{{uppercase ../resource.name}}_SUCCESS, payload: item };
  },

	{{/startWith}}
{{/each}}{{/notNull}}
{{#each resource._services}}
{{#equal crudAction null}}
  /*
  Name: {{name}}
  Description: {{description}}
  Params: {{#each _params}}
    {{type}} {{name}} - {{description}}{{/each}}
  */
  {{name}}: function(...params) {
    return function(dispatch) {
      return {{capitalize ../resource.name}}Api
        .{{name}}(params)
        .then( result => {
          dispatch(actionsFunction.{{name}}Success(result));
        })
        .catch(error => {
          throw error;
        });
    };
  },

  {{name}}Success: function(result) {
    return { type: types.{{uppercase name}}_{{uppercase ../resource.name}}_SUCCESS, payload: result };
  },
		
	{{/equal}}
{{/each}}
};

export default actionsFunction;
