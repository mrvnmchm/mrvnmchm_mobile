**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": false,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
import {{capitalize resource.name}}ApiGenerated from "./generated/{{capitalize resource.name}}ApiGenerated";

// Dependencies
{{#notEqual resource.name "User"}}//{{/notEqual}}import axios from "axios";
{{#notEqual resource.name "User"}}//{{/notEqual}}import { properties } from "../config/properties";

class {{capitalize resource.name}}Api extends {{capitalize resource.name}}ApiGenerated {
  // You can customize the base actions overriding the object "actionsFunction" as shown in the example below:
  /** 
  // EXAMPLE:
 
  // Get {{capitalize resource.name}} List
  static get{{capitalize resource.name}}List() {
    console.log("This is my custom API");

    return fetch("http://localhost:3000/api/{{lowercase resource.name}}s")
      .then(response => {
        return response.json();
      })
      .catch(error => {
        throw error;
      });
  }
  */
{{#equal resource.name "User"}}

  /**
   * UserService.login
   *   @description login
   *
   */
  static login(username, password) {
    return axios
      .post(properties.endpoint + "/login", {
        username: username,
        password: password
      })
      .then(response => {
        return response.data;
      })
      .catch(error => {
        return error;
      });
  }

  /**
   * UserService.changePassword
   *   @description Change password for logged user
   *   @param string passwordOld old password user
   *   @param string passwordNew new password
   *   @returns object
   *
   */
  static changePassword(passwordNew, passwordOld) {
    return axios
      .post(properties.endpoint + "/changePassword", {
        passwordNew: passwordNew,
        passwordOld: passwordOld
      })
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

  /**
   * UserService.changePasswordAdmin
   *   @description Change password of user from admin
   *   @param string passwordAdmin password admin user
   *   @param string passwordNew new password
   *   @returns object
   *
   */
  static changePasswordAdmin(id, passwordAdmin, passwordNew) {
    return axios
      .post(UserApiGenerated.contextUrl + "/" + id + "/changePassword", {
        passwordNew: passwordNew,
        passwordAdmin: passwordAdmin
      })
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }
  {{/equal}}

}

export default {{capitalize resource.name}}Api;