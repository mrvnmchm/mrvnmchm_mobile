**** PROPERTIES SKAFFOLDER ****
{
    "forEachObj": "resource",
    "overwrite": true,
    "_partials": []
}
**** END PROPERTIES SKAFFOLDER ****
/**
 *
 *
  _____                      _              _ _ _     _   _     _        __ _ _
 |  __ \                    | |            | (_) |   | | | |   (_)      / _(_) |
 | |  | | ___    _ __   ___ | |_    ___  __| |_| |_  | |_| |__  _ ___  | |_ _| | ___
 | |  | |/ _ \  | '_ \ / _ \| __|  / _ \/ _` | | __| | __| '_ \| / __| |  _| | |/ _ \
 | |__| | (_) | | | | | (_) | |_  |  __/ (_| | | |_  | |_| | | | \__ \ | | | | |  __/
 |_____/ \___/  |_| |_|\___/ \__|  \___|\__,_|_|\__|  \__|_| |_|_|___/ |_| |_|_|\___|

 * DO NOT EDIT THIS FILE!!
 *
 *  TO CUSTOMIZE APIS IN {{capitalize resource.name}}ApiGenerated.js PLEASE EDIT ../{{capitalize resource.name}}Api.js
 *
 *  -- THIS FILE WILL BE OVERWRITTEN ON THE NEXT SKAFFOLDER'S CODE GENERATION --
 *
 */
 
// Dependencies
import axios from "axios";
import { properties } from "../../config/properties";

class {{capitalize resource.name}}ApiGenerated {

  static contextUrl = properties.endpoint + "{{resource.url}}";

{{#notNull resource._entity}}
  // CRUD METHODS

{{#each resource._services}}
	{{#equal crudAction 'list'}}
  /**
  * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
  *   @description {{description}}{{/notEmpty}}{{#each _params}}
  *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
  *   @returns {{returnType}}{{/notEmpty}}
  *
  */
  static get{{capitalize ../resource.name}}List() {
    return axios.get({{capitalize ../resource.name}}ApiGenerated.contextUrl)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

	{{/equal}}
	{{#equal crudAction 'get'}}
  /**
  * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
  *   @description {{description}}{{/notEmpty}}{{#each _params}}
  *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
  *   @returns {{returnType}}{{/notEmpty}}
  *
  */
  static getOne{{capitalize ../resource.name}}(id) {
    return axios.get({{capitalize ../resource.name}}ApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

	{{/equal}}
	{{#equal crudAction 'update'}}
  /**
  * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
  *   @description {{description}}{{/notEmpty}}{{#each _params}}
  *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
  *   @returns {{returnType}}{{/notEmpty}}
  *
  */
  static save{{capitalize ../resource.name}}({{lowercase ../resource.name}}) {
    return axios.post({{capitalize ../resource.name}}ApiGenerated.contextUrl + "/" + {{lowercase ../resource.name}}._id, {{lowercase ../resource.name}} )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

	{{/equal}}
	{{#equal crudAction 'delete'}}
  /**
  * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
  *   @description {{description}}{{/notEmpty}}{{#each _params}}
  *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
  *   @returns {{returnType}}{{/notEmpty}}
  *
  */
  static delete{{capitalize ../resource.name}}(id) {
    return axios.delete({{capitalize ../resource.name}}ApiGenerated.contextUrl + "/" + id)
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

	{{/equal}}
	{{#equal crudAction 'create'}}
  /**
  * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
  *   @description {{description}}{{/notEmpty}}{{#each _params}}
  *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
  *   @returns {{returnType}}{{/notEmpty}}
  *
  */
  static create{{capitalize ../resource.name}}({{lowercase ../resource.name}}) {
    return axios.post({{capitalize ../resource.name}}ApiGenerated.contextUrl, {{lowercase ../resource.name}} )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

	{{/equal}}
	{{#startWith crudAction 'findBy'}}
  /**
  * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
  *   @description {{description}}{{/notEmpty}}{{#each _params}}
  *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
  *   @returns {{returnType}}{{/notEmpty}}
  *
  */
  static {{name}}(id) {
    return axios.get({{capitalize ../resource.name}}ApiGenerated.contextUrl + "/findBy{{subStr name 6 }}/" + id )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

	{{/startWith}}
	{{#startWith crudAction 'get'}}
  /**
  * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
  *   @description {{description}}{{/notEmpty}}{{#each _params}}
  *   @param {{type}} {{name}}{{#notEmpty description}} {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
  *   @returns {{returnType}}{{/notEmpty}}
  *
  */
  static get{{subStrCap name 3 }}(id) {
    return axios.get({{capitalize ../resource.name}}ApiGenerated.contextUrl + '/' + id + 'get{{subStrCap name 3 }}' )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

	{{/startWith}}
{{/each}}{{/notNull}}

    // Custom APIs
{{#each resource._services}}
{{#equal crudAction null}}
  /**
  * {{../resource.name}}Service.{{name}}{{#notEmpty description}}
  *   @description {{description}}{{/notEmpty}}{{#each _params}}
  *   @param {{type}} {{name}}{{#notEmpty description}} - {{description}}{{/notEmpty}}{{/each}}{{#notEmpty returnType}}
  *   @returns {{returnType}}{{/notEmpty}}
  *
  */
  static {{name}}(...params) {
    return axios.{{lowercase method}}({{capitalize ../resource.name}}ApiGenerated.contextUrl + '{{url}}' )
      .then(response => {
        return response.data;
      })
      .catch(error => {
        throw error;
      });
  }

	{{/equal}}
{{/each}}
}

export default {{capitalize resource.name}}ApiGenerated;
