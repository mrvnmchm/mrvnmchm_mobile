import React, { Component } from "react";
import { StyleSheet } from "react-native";{{#hasRelationmm crudResource}}
import SectionedMultiSelect from "react-native-sectioned-multi-select";{{/hasRelationmm}}
import {
  Header,
  Title,
  Container,
  Content,
  Body,
  Button,
  Text,
  Icon,
  Right,
  Left,
  Form,
  ListItem,
  Item,
  Label,{{#findInArray crudResource._entity._attrs "type" "String"}}
  Input,{{/findInArray}}{{#or (hasInArray crudResource._entity._attrs "_enum") (hasRelation1m crudResource) }}
  Picker,{{/or}}{{#findInArray crudResource._entity._attrs "type" "Date"}}
  DatePicker,{{/findInArray}}{{#findInArray crudResource._entity._attrs "type" "Boolean"}}
  Switch,{{/findInArray}}
} from "native-base";{{#notNull module._roles}}
import SecurityService from "../security/SecurityService";{{/notNull}}

// Redux
import PropTypes from "prop-types";
import { bindActionCreators } from "redux";
import { connect } from "react-redux";

// Custom Actions


// START IMPORT ACTIONS
// END IMPORT ACTIONS

/** APIs
**/


class {{capitalize module.name}} extends Component {
  
  // Init {{lowercase crudResource.name}}
  constructor(props) {
    super(props);
    this.state = {
      {{lowercase crudResource.name}}: {}{{#notNull module._roles}},
      authorized: false{{/notNull}}
    };
  }

  // Load data on start
  componentWillMount() {

    this.props.navigation.addListener("willFocus", async () => { {{#notNull module._roles}}
      // Check security
      if (await SecurityService.isAuth([ {{#each _roles}}'{{name}}',{{/each}} ])) {
        this.setState({ authorized: true });
      } else {
        this.props.navigation.navigate("Login", {
          showError: "Not authorized"
        });
        return;
      }

      {{/notNull}}

      // Load data
      const itemId = this.props.navigation.getParam("id", "new");
      if (itemId !== "new") {
        this.props.actions{{capitalize crudResource.name}}.load{{capitalize crudResource.name}}(itemId);{{#each crudResource._relations}}{{#notEqual _ent1._id ../crudResource._entity._id}}
        this.props.actions{{capitalize _ent1.name}}.findBy{{name}}(itemId);{{/notEqual}}{{/each}}
      } else {
        this.setState({
          {{lowercase crudResource.name}}: {}
        });
      }
      {{#each crudResource._relations}}{{#equal _ent1._id ../crudResource._entity._id}}
      this.props.actions{{capitalize _ent2.name}}.load{{capitalize _ent2.name}}List();{{/equal}}{{/each}}
    });
  }

  // Clear reducer
  componentWillUnmount() {
    this.setState({
      {{lowercase crudResource.name}}: {}
    });
    this.props.actions{{capitalize crudResource.name}}.reset();
  }

  // Insert props {{lowercase crudResource.name}} in state
  componentWillReceiveProps(props) {
    this.setState({
      {{lowercase crudResource.name}}: props.{{lowercase crudResource.name}}
    });
  }

  // Save data
  save() {
    // Validation
    let errors = {};
    {{#each crudResource._entity._attrs}}{{#notEmpty required}}
    if (!this.state.{{lowercase ../crudResource.name}}.{{name}} || this.state.{{lowercase ../crudResource.name}}.{{name}}.trim() === "") {
      errors.{{name}} = true;
    }
    {{/notEmpty}}{{/each}}{{#each crudResource._relations}}{{#equal _ent1._id ../crudResource._entity._id}}{{#notEmpty required}}
    if (!this.state.{{lowercase ../crudResource.name}}.{{name}} || this.state.{{lowercase ../crudResource.name}}.{{name}}.trim() === "") {
      errors.{{name}} = true;
    }
    {{/notEmpty}}{{/equal}}{{/each}}

    this.setState({ errors: errors });
    if (Object.keys(errors).length > 0) {
      return;
    }

    // Save
    if (this.state.{{lowercase crudResource.name}}._id) {
      // Edit
      this.props.actions{{capitalize crudResource.name}}.save{{capitalize crudResource.name}}(this.state.{{lowercase crudResource.name}}).then(data => {
        this.props.navigation.navigate("{{capitalize crudResource.name}}List");
      });
    } else {
      // Create
      this.props.actions{{capitalize crudResource.name}}.create{{capitalize crudResource.name}}(this.state.{{lowercase crudResource.name}}).then(data => {
        this.props.navigation.navigate("{{capitalize crudResource.name}}List");
      });
    }
  }

  // Show content
  render() { {{#notNull module._roles}}

    // Check security
    if (!this.state.authorized) {
      return null;
    }
    {{/notNull}}

    return (
      <Container>
        <Header>
          <Left>
            <Button
            transparent
            onPress={() => this.props.navigation.goBack()}
            >
              <Icon name="arrow-back" />
            </Button>
          </Left>
          <Body>
            <Title>Detail {{capitalize crudResource.name}}</Title>
          </Body>
          <Right>
            <Button transparent onPress={() => this.save()}>
              <Text>Save</Text>
            </Button>
          </Right>
        </Header>
        <Content>
          <Form>
            {{#each crudResource._entity._attrs}}
            {{#notEmpty _enum}}
            <Item stackedLabel{{#notEmpty required}} {...(this.state.errors && this.state.errors.{{name}} === true ? { style: styles.validatorItem } : {})}{{/notEmpty}}>
              <Label{{#notEmpty required}}
                {...(this.state.errors && this.state.errors.{{name}} === true ? { style: styles.validatorLabel } : {})}{{/notEmpty}}>
                {{capitalize name}}{{#notEmpty required}} *{{/notEmpty}}
              </Label>
              <Picker
                mode="dropdown"
                iosHeader="Select a value"
                iosIcon={<Icon name="arrow-down" />}
                style=\{{ width: undefined }}
                selectedValue={this.state.{{lowercase ../crudResource.name}}.{{name}} }
                value={this.state.{{lowercase ../crudResource.name}}.{{name}} }
                onValueChange={value =>
                  this.setState(Object.assign(this.state.{{lowercase ../crudResource.name}}, { {{name}}: value }))
                }
              >{{#each _enum}}
                <Picker.Item label="{{name}}" value="{{name}}" />{{/each}}
              </Picker>
            </Item>{{#notEmpty required}}
            {this.state.errors && this.state.errors.{{name}} === true && (
              <Text style={styles.validatorMessage}>Value is required</Text>
            )}{{/notEmpty}}
            {{/notEmpty}}
            {{#isEmptyNull _enum}}
            {{#equal type 'Date'}}
            <Item stackedLabel{{#notEmpty required}} {...(this.state.errors && this.state.errors.{{name}} === true ? { style: styles.validatorItem } : {})}{{/notEmpty}}>
              <Label{{#notEmpty required}}
                {...(this.state.errors && this.state.errors.{{name}} === true ? { style: styles.validatorLabel } : {})}{{/notEmpty}}>
                {{capitalize name}}{{#notEmpty required}} *{{/notEmpty}}
              </Label>
              <DatePicker
                placeHolderText="Select a date"
                defaultDate={this.state.{{lowercase ../crudResource.name}}.{{name}} }
                onDateChange={value => 
                  this.setState(Object.assign(this.state.{{lowercase ../crudResource.name}}, { {{name}}: value }))
                }
              />
            </Item>{{#notEmpty required}}
            {this.state.errors && this.state.errors.{{name}} === true && (
              <Text style={styles.validatorMessage}>Value is required</Text>
            )}{{/notEmpty}}
            {{/equal}}
            {{#equal type 'Boolean'}}
            <ListItem>
              <Left>
                <Label>{{capitalize name}}{{#notEmpty required}} *{{/notEmpty}}</Label>
              </Left>
              <Right>
                <Switch
                  value={this.state.{{lowercase ../crudResource.name}}.{{name}} }
                  onValueChange={value =>
                    this.setState(Object.assign(this.state.{{lowercase ../crudResource.name}}, { {{name}}: value }))
                  }
                />
              </Right>
            </ListItem>
            {{/equal}}
            {{#notEqual type 'Boolean'}}{{#notEqual type 'Date'}}
            <Item floatingLabel{{#notEmpty required}} {...(this.state.errors && this.state.errors.{{name}} === true ? { style: styles.validatorItem } : {})}{{/notEmpty}}>
              <Label{{#notEmpty required}}
                {...(this.state.errors && this.state.errors.{{name}} === true ? { style: styles.validatorLabel } : {})}{{/notEmpty}}>
                {{capitalize name}}{{#notEmpty required}} *{{/notEmpty}}
              </Label>
              <Input
                onChangeText={value =>
                  this.setState(Object.assign(this.state.{{lowercase ../crudResource.name}}, { {{name}}: value }))
                }
                value={this.state.{{lowercase ../crudResource.name}}.{{name}} && this.state.{{lowercase ../crudResource.name}}.{{name}}.toString()}
              />
            </Item>{{#notEmpty required}}
            {this.state.errors && this.state.errors.{{name}} === true && (
              <Text style={styles.validatorMessage}>Value is required</Text>
            )}{{/notEmpty}}
          {{/notEqual}}{{/notEqual}}
          {{/isEmptyNull}}
          {{/each}}

          {{#notEmpty crudResource._relations}}
          {/* RELATIONS */}
          {{/notEmpty}}{{#each crudResource._relations}}{{#equal _ent1._id ../crudResource._entity._id}}{{#equal type 'm:m'}}
          {/* Relation m:m {{name}} with {{_ent2.name}} */}
          
          <Item stackedLabel>              
            <Label {{#notEmpty required}}
              {...(this.state.errors && this.state.errors.{{name}} === true ? { style: styles.validatorLabel } : {})}{{/notEmpty}}>
              {{capitalize name}}{{#notEmpty required}} *{{/notEmpty}}
            </Label>
            <SectionedMultiSelect
              items={this.props.list{{capitalize _ent2.name}} }
              displayKey="_id"
              uniqueKey="_id"
              selectText="Choose some items..."
              alwaysShowSelectText={true}
              modalAnimationType={"slide"}
              renderSelectText={() => {
                return "Choose some items...";
              }}
              onSelectedItemsChange={value =>
                this.setState(Object.assign(this.state.{{lowercase ../crudResource.name}}, { {{name}}: value }))
              }
              selectedItems={this.state.{{lowercase ../crudResource.name}}.{{name}} }
            />
          </Item>
          
          {{/equal}}{{#notEqual type 'm:m'}}
          {/* Relation 1:m {{name}} with {{_ent2.name}} */}
          
          <Item stackedLabel{{#notEmpty required}} {...(this.state.errors && this.state.errors.{{name}} === true ? { style: styles.validatorItem } : {})}{{/notEmpty}}>
            <Label {{#notEmpty required}}
              {...(this.state.errors && this.state.errors.{{name}} === true ? { style: styles.validatorLabel } : {})}{{/notEmpty}}>
              {{capitalize name}}{{#notEmpty required}} *{{/notEmpty}}
            </Label>
            <Picker
              mode="dropdown"
              iosHeader="Select a value"
              iosIcon={<Icon name="arrow-down" />}
              style=\{{ width: undefined }}
              selectedValue={this.state.{{lowercase ../crudResource.name}}.{{name}} }
              value={this.state.{{lowercase ../crudResource.name}}.{{name}} }
              onValueChange={value =>
                this.setState(Object.assign(this.state.{{lowercase ../crudResource.name}}, { {{name}}: value }))
              }
            >
              {this.props.list{{capitalize _ent2.name}} &&
                this.props.list{{capitalize _ent2.name}}.map(row => (
                  <Picker.Item label={row._id} value={row._id} key={row._id}>
                    {row._id}
                  </Picker.Item>
                ))}
            </Picker>
          </Item>{{#notEmpty required}}
            {this.state.errors && this.state.errors.{{name}} === true && (
              <Text style={styles.validatorMessage}>Value is required</Text>
            )}{{/notEmpty}}
          
          {{/notEqual}}{{/equal}}{{/each}}{{#notEmpty crudResource._relations}}{{#checkExternalRelation crudResource._relations crudResource._entity}}
          {/* EXTERNAL RELATIONS */}
          {{/checkExternalRelation}}{{/notEmpty}}{{#each crudResource._relations}}{{#notEqual _ent1._id ../crudResource._entity._id}}
          {/* External relation with {{_ent1.name}} */}

          {{/notEqual}}{{/each}}

          </Form>
        </Content>
      </Container>
    );
  }
}

// Store actions
const mapDispatchToProps = function(dispatch) {
  return { {{#eachResource module._services}}{{#notEqual name 'User'}}
    actions{{capitalize name}}: bindActionCreators({{capitalize name}}Actions, dispatch),{{/notEqual}}{{/eachResource}}
  };
};

// Validate types
{{capitalize crudResource.name}}Edit.propTypes = { {{#eachResource module._services}}{{#notEqual name 'User'}}
  actions{{capitalize name}}: PropTypes.object.isRequired,{{/notEqual}}{{/eachResource}}
};

// Get props from state
function mapStateToProps(state, ownProps) {
  return {
    {{lowercase crudResource.name}}: state.{{capitalize crudResource.name}}EditReducer.{{lowercase crudResource.name}}{{#each crudResource._relations}}{{#equal _ent1._id ../crudResource._entity._id}},
    list{{capitalize _ent2.name}}: state.{{capitalize ../crudResource.name}}EditReducer.list{{capitalize _ent2.name}}{{/equal}}{{/each}}{{#each crudResource._relations}}{{#notEqual _ent1._id ../crudResource._entity._id}},
    list{{capitalize _ent1.name}}: state.{{capitalize ../crudResource.name}}EditReducer.list{{capitalize _ent1.name}}{{/notEqual}}{{/each}}
  };
}

export default connect(
  mapStateToProps,
  mapDispatchToProps
)({{capitalize crudResource.name}}Edit);

const styles = StyleSheet.create({
  validatorItem: { borderColor: "red" },
  validatorLabel: { color: "red" },
  validatorMessage: { color: "red", marginLeft: 15, marginTop: 5 }
});
